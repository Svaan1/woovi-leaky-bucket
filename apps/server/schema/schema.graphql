type Query {
  users(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection

  """Get current user's token information"""
  tokens: Tokens!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a user"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  email: String
  createdAt: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User's current token information"""
type Tokens {
  """The user ID"""
  userId: String

  """Current number of tokens available"""
  currentTokens: Int

  """Maximum number of tokens that can be held"""
  maxTokens: Int
}

type Mutation {
  UserSignup(input: UserSignupInput!): UserSignupPayload
  UserLogin(input: UserLoginInput!): UserLoginPayload
  PixTransaction(input: PixTransactionInput!): PixTransactionPayload
}

type UserSignupPayload {
  token: String
  user: User
  clientMutationId: String
}

input UserSignupInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  user: User
  clientMutationId: String
}

input UserLoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type PixTransactionPayload {
  """Name of the owner of the Pix Key"""
  name: String

  """Name of the bank associated with the Pix Key"""
  bank: String
  clientMutationId: String
}

input PixTransactionInput {
  """The PIX key for the transaction."""
  pixKey: String!

  """The value of the PIX transaction."""
  value: Float!
  clientMutationId: String
}